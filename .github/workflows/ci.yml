name: CI Pipeline

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ '**' ]

jobs:
  build_install:
    name: Build & Install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Build (TypeScript)
        run: npm run build

  lint_and_security:
    name: Lint & Security Scan
    runs-on: ubuntu-latest
    needs: build_install
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci --omit=optional

      - name: Type-check (tsc)
        run: npx tsc --noEmit

      - name: Security audit (fail on high)
        run: |
          npm audit --audit-level=high || true
          # We don't fail the job on audit by default, but the command above
          # will print issues. Change to remove '|| true' to fail CI on high sev.

  test:
    name: Test (with DB service)
    runs-on: ubuntu-latest
    needs: [build_install, lint_and_security]
    services:
      db:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: express_db
          MYSQL_USER: appuser
          MYSQL_PASSWORD: apppassword
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -prootpassword" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: npm ci

      - name: Wait for DB
        run: |
          for i in {1..30}; do
            mysqladmin ping -h 127.0.0.1 -uroot -prootpassword && break || sleep 2
          done

      - name: Set DATABASE_URL
        run: echo "DATABASE_URL=mysql://appuser:apppassword@127.0.0.1:3306/express_db?schema=public" >> $GITHUB_ENV

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Apply migrations (deploy)
        run: npx prisma migrate deploy

      - name: Build app
        run: npm run build

      - name: Start server
        run: nohup node ./dist/index.js > server.log 2>&1 &

      - name: Wait for server
        run: |
          for i in {1..30}; do
            curl -sSf http://127.0.0.1:4000/ && break || sleep 2
          done

      - name: API smoke test - create user
        run: |
          curl -s -X POST http://127.0.0.1:4000/users -H "Content-Type: application/json" -d '{"name":"ci","email":"ci@example.com"}'

      - name: API smoke test - list users
        run: |
          curl -s http://127.0.0.1:4000/users

  build_image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image (tagged by SHA)
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            fa22bcs153/prismaboilerplate:${{ github.sha }}

  deploy:
    name: Deploy (only main)
    runs-on: ubuntu-latest
    needs: build_image
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull image by SHA and retag as latest
        run: |
          docker pull fa22bcs153/prismaboilerplate:${{ github.sha }}
          docker tag fa22bcs153/prismaboilerplate:${{ github.sha }} fa22bcs153/prismaboilerplate:latest

      - name: Push latest tag
        run: |
          docker push fa22bcs153/prismaboilerplate:latest
